const mysql = require("mysql2/promise");
const bcrypt = require("bcrypt");

// тЬЕ рждрзЛржорж╛рж░ DB ржХрж╛ржирзЗржХрж╢ржи ржбрж┐ржЯрзЗржЗрж▓рж╕
const dbConfig = {
  host: "localhost",
  user: "root",           // рждрзЛржорж╛рж░ MySQL ржЗржЙржЬрж╛рж░ржирзЗржо
  password: "",           // ржпржжрж┐ local mysql рж╣рзЯ, рждрж╛рж╣рж▓рзЗ ржлрж╛ржБржХрж╛
  database: "practise_auth", // тмЕя╕П рждрзЛржорж╛рж░ ржбрж╛ржЯрж╛ржмрзЗржЬрзЗрж░ ржирж╛ржо ржмрж╕рж╛ржУ
};

const hashOldPasswords = async () => {
  try {
    // тЬЕ DB ржХрж╛ржирзЗржХрж╢ржи рждрзИрж░рж┐
    const connection = await mysql.createConnection(dbConfig);
    console.log("ЁЯУб Connected to DB");

    // тЬЕ рж╕ржм ржЗржЙржЬрж╛рж░ ржкрзЬрзЛ
    const [users] = await connection.execute("SELECT id, password FROM users");

    for (const user of users) {
      const { id, password } = user;

      // тЬЕ ржпржжрж┐ password ржЖржЧрзЗ ржерзЗржХрзЗ hashed ржирж╛ рж╣рзЯ
      if (!password.startsWith("$2b$")) {
        const hashedPassword = await bcrypt.hash(password, 10);

        // тЬЕ DB рждрзЗ ржЖржкржбрзЗржЯ ржХрж░рзЛ
        await connection.execute(
          "UPDATE users SET password = ? WHERE id = ?",
          [hashedPassword, id]
        );

        console.log(`тЬЕ User ID ${id} password hashed`);
      } else {
        console.log(`тЬЕ User ID ${id} already hashed`);
      }
    }

    console.log("ЁЯОЙ All applicable passwords have been hashed");
    await connection.end();
  } catch (err) {
    console.error("тЭМ Error:", err);
  }
};

hashOldPasswords();
